Proyecto de Blog Personal
Descripción: Desarrollar un sistema de blog que almacene información relacionada con publicaciones, usuarios y comentarios, incluyendo herramientas de filtrado y búsqueda avanzadas.

Características:

Registro e inicio de sesión de usuarios (ingreso simple con usuario y contraseña, sin utilización de sesiones).
Creación, edición y eliminación de publicaciones.
Comentarios en publicaciones.
Categorías para organizar publicaciones.
Búsqueda de publicaciones.
Uso de una base de datos JSON para almacenar publicaciones, usuarios y comentarios.

Objetivos Específicos:

Desarrollar una aplicación web utilizando Node.js y Express.
Integrar una base de datos JSON.
Aplicar conceptos de asincronía y manejo de promesas.
Organizar el código en módulos.
Utilizar el motor de plantillas Pug para generar HTML simple.
Implementar un sistema de rutas dinámicas y middleware.
Probar la aplicación con Postman o Thunder Client (capturando pantallas para la documentación).
Seguir buenas prácticas de desarrollo, manteniendo una estructura de carpetas ordenada y utilizando POO.

// ---------------------------------------------------------------------------//
Estructura del Proyecto

blog-personal/
│
├── app.js                  # Archivo principal que inicia el servidor
├── package.json            # Dependencias del proyecto
├── routes/                 # Rutas de la aplicación
│   └── blogRoutes.js       # Rutas del blog
├── models/                 # Controladores de la lógica de negocio
│   └── BlogController.js   # Controlador para manejar publicaciones y usuarios
├── views/                  # Vistas Pug
│   ├── index.pug           # Página principal que lista publicaciones
│   ├── new.pug             # Formulario para crear nuevas publicaciones
│   ├── edit.pug            # Formulario para editar publicaciones
│   ├── register.pug        # Formulario de registro de usuarios
│   └── login.pug           # Formulario de inicio de sesión
├── public/                 # Archivos estáticos (CSS, JS, imágenes)
│   ├── styles/              
│   │   └── styles.css
│   ├── JS/                  # (opcional) Carpeta para archivos JS
│   └── imágenes/            # (opcional) Carpeta para imágenes
├── data/
│   ├── posts.json         # Almacena las publicaciones del blog
│   └── users.json         # Almacena los datos de los usuarios
└── README.md               # Documentación del proyecto


// ---------------------------------------------------------------------------//
package.json:

{
  "name": "blog-personal",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
  "start": "nodemon app.js"
},
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "body-parser": "^1.20.3",
    "express": "^4.21.1",
    "pug": "^3.0.3"
  },
  "devDependencies": {
    "nodemon": "^3.1.7"
  }
}

// ---------------------------------------------------------------------------//
app.js: El archivo principal que inicia el servidor y configura las rutas y middleware.

const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');

const app = express();

// Configuración de Pug
app.set('view engine', 'pug');
app.set('views', path.join(__dirname, 'views'));

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));


// Definir rutas principales
const blogRoutes = require('./routes/blogRoutes');
app.use('/', blogRoutes);

// Iniciar el servidor
app.listen(3000, () => {
    console.log('Servidor escuchando en el puerto 3000');
});

// ---------------------------------------------------------------------------//
routes/blogRoutes.js: El archivo que contiene las rutas principales de tu aplicación.

const express = require('express');
const router = express.Router();
const BlogController = require('../modeconst express = require('express');
const router = express.Router();
const BlogController = require('../models/BlogController');

// Ruta para la página principal (listar publicaciones)
router.get('/', BlogController.getPosts);

// Ruta para crear una nueva publicación
router.get('/new', BlogController.newPostForm);
router.post('/new', BlogController.createPost);

// Ruta para editar una publicación
router.get('/edit/:id', BlogController.editPostForm);
router.post('/edit/:id', BlogController.updatePost);

// Ruta para eliminar una publicación
router.post('/delete/:id', BlogController.deletePost);

// Ruta para comentar en una publicación
router.post('/comment/:id', BlogController.addComment);


// Ruta para mostrar el formulario de registro
router.get('/register', (req, res) => {
    res.render('register');
});

  // Ruta para manejar el registro
router.post('/register', BlogController.registerUser);

  // Ruta para mostrar el formulario de inicio de sesión
router.get('/login', (req, res) => {
    res.render('login');
});

  // Ruta para manejar el inicio de sesión
router.post('/login', BlogController.loginUser);

  // Ruta para Búsqueda
router.get('/search', BlogController.searchPosts);


module.exports = router;

// ---------------------------------------------------------------------------//
models/BlogController.js: El archivo que maneja la lógica para la creación, edición y eliminación de usuarios y publicaciones.

const fs = require('fs');
const path = require('path');
const dataPath = path.join(__dirname, '../data/posts.json');
const usersPath = path.join(__dirname, '../data/users.json');


class BlogController {

  // Obtener todas las publicaciones
static getPosts(req, res) {
    const posts = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
    res.render('index', { posts });
}

  // Mostrar formulario para nueva publicación
static newPostForm(req, res) {
    res.render('new');
}

  // Crear una nueva publicación
  static createPost(req, res) {
    const posts = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
    const { title, content, author, category } = req.body;
  
    const newPost = {
      id: posts.length + 1,
      title,
      content,
      author,
      category,  // Agregar la categoría
      comments: []
    };
  
    posts.push(newPost);
    fs.writeFileSync(dataPath, JSON.stringify(posts));
    res.redirect('/');
  }

  // Formulario para editar publicación
static editPostForm(req, res) {
    const posts = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
    const post = posts.find(p => p.id == req.params.id);
    res.render('edit', { post });
}

  // Actualizar publicación
static updatePost(req, res) {
    const posts = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
    const post = posts.find(p => p.id == req.params.id);
    post.title = req.body.title;
    post.content = req.body.content;
    fs.writeFileSync(dataPath, JSON.stringify(posts));
    res.redirect('/');
}

  // Eliminar publicación
static deletePost(req, res) {
    let posts = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
    posts = posts.filter(p => p.id != req.params.id);
    fs.writeFileSync(dataPath, JSON.stringify(posts));
    res.redirect('/');
}

  // Agregar un comentario
static addComment(req, res) {
    const posts = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
    const post = posts.find(p => p.id == req.params.id);
    const newComment = { text: req.body.comment };
    post.comments.push(newComment);
    fs.writeFileSync(dataPath, JSON.stringify(posts));
    res.redirect('/');
}


// Registrar un nuevo usuario
static registerUser(req, res) {
  const users = JSON.parse(fs.readFileSync(usersPath, 'utf8'));
  const { username, password } = req.body;
  console.log("Datos recibidos:", username, password);

  // Verificar si el usuario ya existe
  const userExists = users.some(user => user.username === username);
  if (userExists) {
    return res.send('El usuario ya existe');
  }

  // Crear nuevo usuario
  const newUser = { username, password };
  users.push(newUser);
  fs.writeFileSync(usersPath, JSON.stringify(users));
   // Enviar respuesta de éxito
  res.send('Usuario registrado con éxito');
}

// Iniciar sesión
static loginUser(req, res) {
  const users = JSON.parse(fs.readFileSync(usersPath, 'utf8'));
  const { username, password } = req.body;

  // Verificar si el usuario existe y la contraseña es correcta
  const user = users.find(user => user.username === username && user.password === password);
  if (!user) {
    return res.send('Usuario o contraseña incorrectos');
  }

  // Redirigir al panel de usuario o página principal
  res.send('Inicio de sesión exitoso');
}

  // buscar publicaciones por título o categoría
static searchPosts(req, res) {
  const posts = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
  const { query } = req.query;

  const filteredPosts = posts.filter(post => 
    post.title.toLowerCase().includes(query.toLowerCase()) || 
    post.category.toLowerCase().includes(query.toLowerCase())
  );

  res.render('index', { posts: filteredPosts });
}
}

module.exports = BlogController;

// ---------------------------------------------------------------------------//
views/register.pug: La vista que muestra el formulario de registro de usuario.

doctype html
html
head
    title Registro de Usuario
body
    h1 Registro
    form(action="/register", method="POST")
        input(type="text" name="username" placeholder="Usuario" required)
        input(type="password" name="password" placeholder="Contraseña" required)
        button(type="submit") Registrarse

// ---------------------------------------------------------------------------//
views/edit.pug:

doctype html
html
    head
        title Editar Publicación
    body
        h1 Editar Publicación
        form(action=`/edit/${post.id}`, method="POST")
        input(type="text" name="title" value=post.title required)
        textarea(name="content" required)= post.content
        button(type="submit") Actualizar

// ---------------------------------------------------------------------------//
views/index.pug:

doctype html
html
    head
        title Blog Personal
        link(rel="stylesheet", href="/public/styles/styles.css")
    body
        h1 Bienvenido a mi Blog
        a(href="/new") Crear nueva publicación
        a(href="/register") Registrarse
        a(href="/login") Iniciar sesión
        ul
            each post in posts
                li
                    a(href=`/edit/${post.id}`) Editar
                    | #{post.title} - #{post.author}
                    | a(href=`/comment/${post.id}`) Comentar

// ---------------------------------------------------------------------------//
views/login.pug:

doctype html
html
    head
        title Iniciar Sesión
    body
        h1 Iniciar Sesión
        form(action="/login", method="POST")
            input(type="text" name="username" placeholder="Usuario" required)
            input(type="password" name="password" placeholder="Contraseña" required)
            button(type="submit") Iniciar Sesión

// ---------------------------------------------------------------------------//
views/new.pug:

doctype html
html
head
    title Nueva Publicación
body
    h1 Crear Nueva Publicación
    form(action="/new", method="POST")
    input(type="text" name="title" placeholder="Título")
    textarea(name="content" placeholder="Contenido")
    input(type="text" name="author" placeholder="Autor")
    input(type="text" name="category" placeholder="Categoría")
    button(type="submit") Publicar

// ---------------------------------------------------------------------------//
data/users.json: El archivo JSON que contiene los datos de usuarios o publicaciones, si estás utilizando estos archivos para almacenar la información.

[]

data/posts.json:

[]

// ---------------------------------------------------------------------------//
public/styles/styles.css:

body {
    font-family: Arial, sans-serif;
    margin: 20px;
}

h1 {
    color: #333;
}

form {
    margin-bottom: 20px;
}

input, textarea {
    display: block;
    margin: 10px 0;
    padding: 10px;
    width: 300px;
}
